主窗口类型：
QMainWindow：可以包含菜单栏、工具栏、状态栏和标题栏，是最常见的窗口形式
QDialog：是对话窗口的基类，没有菜单栏、工具栏、状态栏
QWidget：不确定窗口的用途，就可以使用这个

QLineEdit控件与回显模式
基本功能：输入单行文字
4中回显模式
1.Normal
2.NoEcho
3.Password
4.PasswordEchoOnEdit()

Pushbutton

QRadioButton单选按钮

QCheckBox复选框控件
3中状态
未选中：0
半选中：1
选中：2

QComBox下拉列表控件

QSlider滑动控件

QSpinBox计数器控件

QDialog对话框
QMessageBox
QColorDialog
QFontDialog
QInputDialog

消息对话框
1.关于对话框
2.错误对话框
3.警告对话框
4.提问对话框
5.消息对话框
这些对话框有两点差异
1.显示对话框图标可能不一样
2.显示按钮可能不一样

QInputDialog输入对话框
有三种类型的输入对话框
QInputDialog.getItem(传入列表或元组，显示为下拉列表对话框
QInputDialog.getText（输入文本
QInputDialog.getInt（输入数字


QColorDialog颜色对话框

QFileDialog文件对话框

绘图API：
1.文本
2.各种图形（直线。点。椭圆。弧线。扇形。。。。
3.图像
QPainter
painter=QPainter()
painter.begin()
painter.drawText()
painter.end()
必须再paintEvent事件方法中绘制各种元素


让控件支持拖拽动作
A
B.setAcceptDrops(True)
B需要两个事件
1.dragEnterEvent 将A托到B
2.dropEvent 在B的区域放下A时触发

使用剪贴板

QCalendarWidget日历控件

创建和使用菜单栏


使用打印机
QtprintSupport
使用打印机对话框
QPrintDialog

显示二维表数据：QTableView

QListView:显示列表数据，需要通过Model关联数据

QListWidget：显示列表数，可以不通过Model进行数据关联

TableWidget：可编辑表格

放置控件到表格单元格中

定位表格中的数据

设置单元格字体和格式

按表格的某一列进行排序

设置单元格的文本对齐

合并单元格

设置单元格的尺寸

在单元格中实现图文混排

设置单元格中图片的尺寸

在表格中显示上下文菜单


QTreeWidget树控件
为树节点添加响应时间
添加、删除、修改节点


QTreeview控件与系统定制模式


容器控件
选项卡控件：QTabWidget（和winform中的tabcontrol相似
堆栈窗口控件:QStackeWidget
停靠控件：QDockWidget

容纳多文档窗口：QMdiArea，QMdiSubWindow

滚动条控件：QScrollBar

使用线程类：QThread

使用Web浏览器控件（QWebEngineView）显示网页,该控件其实就相当于一个浏览器控件
装载本地页面
显示载入本地的页面
Pyqt5调用JavaScript代码
Javascript调用python脚本

绝对布局：通过move方法来实现
水平盒布局：QHBoxLayout，可以使用QHBoxLayout的setSpacing来设置控件之间的间距
设置控件对齐方式


信号与槽函数
为自定义类添加信号与槽函数：使用pyqtSignal定义信号
定义传递多个参数的信号
为类添加多个信号
信号槽N对N连接与断开连接：连接使用connect(),解除连接使用disconnect（）
为窗口添加信号：

多线程更新UI数据
信号与槽自动连接
使用lambda表达式来为槽函数传递参数
使用partial对象为槽函数传递对象

多窗口交互：实质就是窗口之间数据的传递
方式1：窗口交互可以使用强耦合的方式，这种方式的缺点是不灵活
方式2：使用信号和槽函数来进行数据交互，这种方式更好

设置窗口风格
设置窗口样式

设置窗体最大最小化

使用Pyinstaller打包PyQt5应用，适用于所有python开发的应用程序
pip intall pyinsatller
pyinstaller -Fw calc.py 执行打包命令，该命令会自动打包程序，生成两个文件，
                         一个是带命令行的执行程序，一个是不带命令行的执行程序

分页显示数据：当数据比较多的时候，需要将数据分页显示
